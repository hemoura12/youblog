<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC
"-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="blogMapper">

		<resultMap type="Blog" id="resultBlog">
			<id property="blogno" column="blog_no" />
			<result property="rowno" column="rowno" />
			<result property="title" column="title" />
			<result property="writerid" column="writer_id" />
			<result property="membername" column="member_name" />
			<result property="contents" column="contents" />
			<result property="contentstag" column="contents_tag" />
			<result property="writerdate" column="write_date" />
			<result property="thumbnail" column="thumbnail" />
			<result property="titleimage" column="title_image" />
			<result property="catename1" column="cate_name1" />
			<result property="catename2" column="cate_name2" />
			<result property="tag" column="tag" />
			<result property="hits" column="hits" />
			<result property="likecount" column="like_count" />
			<result property="bedcount" column="bed_count" />
			<result property="hitstime" column="hits_time" />
			<result property="state" column="state" />
			<result property="notice" column="notice" />
			<result property="bestno" column="bestno" />
			<result property="readercount" column="reader_count" />
			<result property="readerid" column="reader_id" />
		</resultMap>
		
		<resultMap type="Blog" id="resultList">
			<result property="blogno" column="blog_no" />
			<result property="rowno" column="rowno" />
			<result property="title" column="title" />
			<result property="writerid" column="writer_id" />
			<result property="membername" column="member_name" />
			<result property="contents" column="contents" />
			<result property="contentstag" column="contents_tag" />
			<result property="writerdate" column="write_date" />
			<result property="thumbnail" column="thumbnail" />
			<result property="titleimage" column="title_image" />
			<result property="catename1" column="cate_name1" />
			<result property="catename2" column="cate_name2" />
			<result property="tag" column="tag" />
			<result property="hits" column="hits" />
			<result property="likecount" column="like_count" />
			<result property="bedcount" column="bed_count" />
			<result property="hitstime" column="hits_time" />
			<result property="state" column="state" />
			<result property="notice" column="notice" />
			<result property="bestno" column="bestno" />
			<result property="readercount" column="reader_count" />
			<result property="readerid" column="reader_id" />
		</resultMap>
		
	<select id="allCategory" resultMap="resultList" resultType="Blog">
		select *
		FROM (select ROW_NUMBER() OVER (ORDER BY to_number(replace(BLOG_NO,' ' ,'')) DESC) AS rowno, 
		BLOG_NO, TITLE, WRITER_ID, MEMBER_NAME, CONTENTS, WRITE_DATE, HITS, CATE_NAME1, CATE_NAME2
		from V_BLOG_LIST)
		WHERE rowno <![CDATA[ > ]]> #{row1}
		and rowno <![CDATA[ < ]]>= #{row2}
	</select>		
		
	<select id="selectCategoryAll" resultMap="resultList" resultType="Blog">
		select *
		FROM (select ROW_NUMBER() OVER (ORDER BY to_number(replace(BLOG_NO,' ' ,'')) DESC) AS rowno, 
		BLOG_NO, TITLE, WRITER_ID, MEMBER_NAME, CONTENTS, WRITE_DATE, HITS, CATE_NAME1, CATE_NAME2
		from V_BLOG_LIST WHERE CATE_NAME1 = #{cate1})
		ORDER BY rowno ASC;
	</select>	
		
	<select id="selectCTGLev2All" resultMap="resultList" resultType="Blog">
		select *
		FROM (select ROW_NUMBER() OVER (ORDER BY to_number(replace(BLOG_NO,' ' ,'')) DESC) AS rowno, 
		BLOG_NO, TITLE, WRITER_ID, MEMBER_NAME, CONTENTS, WRITE_DATE, HITS, CATE_NAME1, CATE_NAME2
		from V_BLOG_LIST WHERE CATE_NAME1 = #{cate1})
		WHERE rowno <![CDATA[ > ]]> #{row1}
		and rowno <![CDATA[ < ]]>= #{row2}
		ORDER BY NO ASC;
	</select>	
	
	<select id="selectCTG" resultMap="resultList" resultType="Blog">
		select *
		FROM (select ROW_NUMBER() OVER (ORDER BY to_number(replace(BLOG_NO,' ' ,'')) DESC) AS rowno, 
		BLOG_NO, TITLE, WRITER_ID, MEMBER_NAME, CONTENTS, WRITE_DATE, HITS, CATE_NAME1, CATE_NAME2
		from V_BLOG_LIST 
		WHERE CATE_NAME1 = #{cate1}
		and CATE_NAME2 = #{cate2})
		WHERE rowno <![CDATA[ > ]]> #{row1}
		and rowno <![CDATA[ < ]]>= #{row2}
	</select>
	
	<select id="favoriteList" resultMap="resultList" resultType="Blog">
		SELECT * FROM V_FAVORITE_BLOG
	</select>
	
	<select id="subsBlogList" resultMap="resultList" resultType="Blog">
		SELECT * FROM V_SUBSCRIBE_BLOG
		WHERE reader_ID = #{memberid}
		AND WRITER_ID IN (select WRITER_ID from
  			(select * from 
    			(select reader_ID, WRITER_ID, WRITE_DATE, RANK() OVER(PARTITION BY WRITER_ID ORDER BY WRITE_DATE desc) rank from V_SUBSCRIBE)
 			where reader_ID = #{memberid}
  			and rank <![CDATA[ < ]]>= 1 order by WRITE_DATE desc) where rownum <![CDATA[ < ]]>= 3)
  			<!-- SELECT * FROM V_SUBSCRIBE_BLOG where reader_ID = #{memberid} -->
	</select>
	
	<select id="categoryList" resultType="java.util.HashMap">
		select * from TB_CATEGORY
	</select>
	
	<select id="categoryListLev1" resultType="java.util.HashMap">
		select distinct cate_name1 from TB_CATEGORY
	</select>
	
	
	<select id="subsBlogList" resultMap="resultList" resultType="Blog">
		SELECT * FROM V_SUBSCRIBE_BLOG
		WHERE reader_ID = #{memberid}
		AND WRITER_ID IN (select WRITER_ID from
  			(select * from 
    			(select reader_ID, WRITER_ID, WRITE_DATE, RANK() OVER(PARTITION BY WRITER_ID ORDER BY WRITE_DATE desc) rank from V_SUBSCRIBE)
 			where reader_ID = #{memberid}
  			and rank <![CDATA[ < ]]>= 1 order by WRITE_DATE desc) where rownum <![CDATA[ < ]]>= 3)
  			<!-- SELECT * FROM V_SUBSCRIBE_BLOG where reader_ID = #{memberid} -->
	</select>
<!-- 	<delete id="deleteNotice" parameterType ="_int" flushCache ="true" statementType ="PREPARED">
			delete from notice where noticeno = #{noticeNo}
	</delete>

	<update id="updateNotice" parameterType ="Notice" flushCache="true" statementType="PREPARED">	
	UPDATE NOTICE 
	SET NOTICE_TITLE = #{noticeTitle}, 
	NOTICE_CONTENT = #{noticeContent},
	FILE_PATH = #{filePath} 
	WHERE NOTICE_NO = #{noticeNo}
	UPDATE NOTICE 
	<trim prefix="SET" suffixOverrides=",">
		<if test="noticeTitle != null">NOTICETITLE = #{noticeTitle},</if>
		<if test="noticeContent != null">NOTICECONTENT = #{noticeContent},</if>
		<if test="originalFilepath != null">ORIGINAL_FILEPATH = #{originalFilepath} </if>
	</trim>
	WHERE NOTICENO = #{noticeNo}
 </update> -->


</mapper>